identifier: 'e12'
string: '"*////////*"'
asterisk: '*'
slash: '/'
string: '"/*lkjlkj\'e\'"'
string: '"/*"'
asterisk: '*'
slash: '/'
slash: '/'
asterisk: '*'
asterisk: '*'
slash: '/'
key_word: 'void'
identifier: 'main'
opened_parenthesis: '('
key_word: 'int'
identifier: 'argc'
comma: ','
key_word: 'char'
asterisk: '*'
identifier: 'argv'
opened_bracket: '['
closed_bracket: ']'
closed_parenthesis: ')'
opened_braces: '{'
string: '"12e-25"'
key_word: 'if'
opened_parenthesis: '('
opened_parenthesis: '('
identifier: 'e12'
dot: '.'
identifier: 'f'
increment_operator: '++'
plus: '+'
assignment_operator: '='
exponential: '12e-3'
stream_operator: '<<'
assignment_operator: '='
exponential: '12.3e-12'
plus: '+'
asterisk: '*'
identifier: 'ab12'
dot: '.'
identifier: 'ef'
closed_parenthesis: ')'
and: '&&'
identifier: 'qwe'
dot: '.'
identifier: 'f'
dot: '.'
identifier: 'e'
slash: '/'
asterisk: '*'
identifier: 'f'
increment_operator: '++'
increment_operator: '++'
plus: '+'
identifier: 'g'
closed_parenthesis: ')'
opened_braces: '{'
semicolon: ';'
closed_braces: '}'
char: "'0'"
semicolon: ';'
identifier: 'f'
opened_parenthesis: '('
closed_parenthesis: ')'
semicolon: ';'
string: '"ana \\\nare \\\nmere"'
key_word: 'return'
integer: '0'
semicolon: ';'
closed_braces: '}'
string: '"as"'
